import java.io.IOException;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class AmazonRatingsAverage {

    public static class RatingMapper extends Mapper<Object, Text, Text, Text> {

        private Text productId = new Text();
        private Text ratingInfo = new Text();

        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
            String line = value.toString();

            // Skip header or empty lines
            if (line.startsWith("UserID") || line.trim().isEmpty()) return;

            String[] parts = line.split(",");

            // Validate expected CSV columns
            if (parts.length >= 4) {
                String product = parts[1].trim();  // ProductID
                String rating = parts[2].trim();   // Rating

                try {
                    Double.parseDouble(rating);  // Validation
                    productId.set(product);
                    ratingInfo.set(rating + ",1");
                    context.write(productId, ratingInfo);

                    // Optional debug output
                    System.err.println("MAP: " + product + " => " + rating);
                } catch (NumberFormatException e) {
                    // Skip bad ratings
                }
            }
        }
    }

    public static class AverageReducer extends Reducer<Text, Text, Text, DoubleWritable> {

        private DoubleWritable result = new DoubleWritable();

        public void reduce(Text key, Iterable<Text> values, Context context) throws IOException, InterruptedException {
            double sum = 0;
            int count = 0;

            for (Text val : values) {
                String[] parts = val.toString().split(",");
                try {
                    double rating = Double.parseDouble(parts[0]);
                    int currentCount = Integer.parseInt(parts[1]);

                    sum += rating;
                    count += currentCount;
                } catch (NumberFormatException e) {
                    // Skip malformed values
                }
            }

            if (count > 0) {
                double average = sum / count;
                average = Math.round(average * 100.0) / 100.0;
                result.set(average);
                context.write(key, result);
            }
        }
    }

    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "amazon ratings average");

        job.setJarByClass(AmazonRatingsAverage.class);
        job.setMapperClass(RatingMapper.class);
        job.setReducerClass(AverageReducer.class);

        // Final output key/value types
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(DoubleWritable.class);

        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));

        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}



haha