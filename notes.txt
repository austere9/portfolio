import java.io.IOException;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class AmazonRatingsAverage {

    public static class RatingMapper extends Mapper<Object, Text, Text, DoubleWritable> {
        private Text productId = new Text();
        private DoubleWritable ratingValue = new DoubleWritable();

        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
            String line = value.toString().trim();

            if (line.isEmpty()) return;

            // Split by comma (your file is comma-separated)
            String[] parts = line.split(",");

            // Must have at least 3 fields: UserID, ProductID, Rating
            if (parts.length >= 3) {
                String product = parts[1].trim();
                String rating = parts[2].trim();

                if (product.isEmpty() || rating.isEmpty()) return;

                try {
                    double parsedRating = Double.parseDouble(rating);
                    productId.set(product);
                    ratingValue.set(parsedRating);
                    context.write(productId, ratingValue);
                } catch (NumberFormatException e) {
                    // Skip bad lines
                }
            }
        }
    }

    public static class AverageReducer extends Reducer<Text, DoubleWritable, Text, DoubleWritable> {
        private DoubleWritable result = new DoubleWritable();

        public void reduce(Text key, Iterable<DoubleWritable> values, Context context)
                throws IOException, InterruptedException {
            double sum = 0;
            int count = 0;

            for (DoubleWritable val : values) {
                sum += val.get();
                count++;
            }

            if (count > 0) {
                double average = Math.round((sum / count) * 100.0) / 100.0;
                result.set(average);
                context.write(key, result);
            }
        }
    }

    public static void main(String[] args) throws Exception {
        if (args.length != 2) {
            System.err.println("Usage: AmazonRatingsAverage <input path> <output path>");
            System.exit(-1);
        }

        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "Amazon Product Ratings Average");

        job.setJarByClass(AmazonRatingsAverage.class);
        job.setMapperClass(RatingMapper.class);
        job.setReducerClass(AverageReducer.class);

        job.setMapOutputKeyClass(Text.class);
        job.setMapOutputValueClass(DoubleWritable.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(DoubleWritable.class);

        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));

        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}
